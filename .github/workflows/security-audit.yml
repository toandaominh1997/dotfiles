name: üîí Security Audit & Dependency Updates

on:
  schedule:
    # Run security audit weekly on Mondays at 06:00 UTC
    - cron: '0 6 * * 1'
  workflow_dispatch:
    inputs:
      audit_type:
        description: 'Type of security audit'
        required: false
        default: 'full'
        type: choice
        options:
          - quick
          - full
          - dependencies-only
      force_update:
        description: 'Force dependency updates'
        required: false
        default: false
        type: boolean

env:
  HOMEBREW_NO_AUTO_UPDATE: 1
  HOMEBREW_NO_INSTALL_CLEANUP: 1
  FORCE_COLOR: 1

jobs:
  # ============================================================================
  # Security Vulnerability Scanning
  # ============================================================================
  
  vulnerability-scan:
    name: üîç Vulnerability Scanning
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîí Security audit with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: üìä Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: üîí Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: üõ°Ô∏è Security hardening check
        run: |
          echo "::group::üõ°Ô∏è Security Hardening Analysis"
          
          # Check for potentially insecure patterns
          echo "Checking for insecure HTTP URLs..."
          if grep -r "http://" --include="*.sh" --include="*.conf" . | grep -v "localhost\|127.0.0.1"; then
            echo "‚ö†Ô∏è Insecure HTTP URLs found"
            grep -r "http://" --include="*.sh" --include="*.conf" . | grep -v "localhost\|127.0.0.1"
            exit 1
          fi
          
          # Check for hardcoded credentials patterns
          echo "Checking for potential credential leaks..."
          if grep -ri "password\|secret\|token\|key.*=" --include="*.sh" --include="*.conf" . | grep -v "GITHUB_TOKEN\|INPUT_"; then
            echo "‚ö†Ô∏è Potential credentials found"
            grep -ri "password\|secret\|token\|key.*=" --include="*.sh" --include="*.conf" . | grep -v "GITHUB_TOKEN\|INPUT_"
            exit 1
          fi
          
          # Check for dangerous shell operations
          echo "Checking for dangerous shell operations..."
          dangerous_patterns=(
            "rm -rf \$HOME"
            "rm -rf /"
            "chmod 777"
            "eval.*\$"
            "curl.*|.*sh"
            "wget.*|.*sh"
          )
          
          for pattern in "${dangerous_patterns[@]}"; do
            if grep -r "$pattern" --include="*.sh" .; then
              echo "‚ö†Ô∏è Dangerous pattern found: $pattern"
              exit 1
            fi
          done
          
          echo "‚úÖ Security hardening check passed"
          echo "::endgroup::"

  # ============================================================================
  # Dependency Analysis
  # ============================================================================
  
  dependency-analysis:
    name: üì¶ Dependency Analysis
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üì¶ Analyze package dependencies
        run: |
          echo "::group::üì¶ Package Dependency Analysis"
          
          # Parse packages.conf and check for known vulnerabilities
          if [ -f "config/packages.conf" ]; then
            echo "Analyzing packages from config..."
            
            # Extract package lists
            sections=("required_packages" "formula_packages" "cask_packages")
            for section in "${sections[@]}"; do
              echo "--- $section ---"
              if grep -A 100 "^\[$section\]" config/packages.conf | grep -B 100 "^\[" | grep -v "^\[" | grep -v "^#" | grep -v "^$"; then
                packages=$(grep -A 100 "^\[$section\]" config/packages.conf | grep -B 100 "^\[" | grep -v "^\[" | grep -v "^#" | grep -v "^$")
                echo "$packages"
              fi
            done
          fi
          
          echo "::endgroup::"

      - name: üîç Check for outdated packages
        if: matrix.os == 'macos-latest'
        run: |
          echo "::group::üîç Homebrew Package Status"
          
          # Install homebrew if not present
          if ! command -v brew >/dev/null 2>&1; then
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          fi
          
          # Update brew and check for outdated packages
          brew update >/dev/null 2>&1 || true
          
          echo "Checking for outdated packages..."
          if brew outdated | head -20; then
            echo "‚ÑπÔ∏è Some packages have updates available"
          else
            echo "‚úÖ All packages are up to date"
          fi
          
          echo "::endgroup::"

      - name: üîç Check for security advisories (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "::group::üîç APT Security Check"
          
          # Update package lists
          sudo apt-get update >/dev/null 2>&1
          
          # Check for security updates
          echo "Checking for security updates..."
          if apt list --upgradable 2>/dev/null | grep -i security | head -20; then
            echo "‚ÑπÔ∏è Security updates available"
          else
            echo "‚úÖ No security updates needed"
          fi
          
          echo "::endgroup::"

  # ============================================================================
  # Repository Health Check
  # ============================================================================
  
  repository-health:
    name: üíö Repository Health
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üìä Repository statistics
        run: |
          echo "::group::üìä Repository Statistics"
          
          echo "Repository size: $(du -sh . | cut -f1)"
          echo "Number of files: $(find . -type f | wc -l)"
          echo "Number of shell scripts: $(find . -name "*.sh" | wc -l)"
          echo "Lines of code: $(find . -name "*.sh" -exec wc -l {} + | tail -1)"
          echo "Git commits: $(git rev-list --all --count)"
          echo "Git branches: $(git branch -r | wc -l)"
          echo "Latest commit: $(git log -1 --pretty=format:'%h %s (%an, %ar)')"
          
          echo "::endgroup::"

      - name: üìù Documentation check
        run: |
          echo "::group::üìù Documentation Health"
          
          # Check for required documentation files
          required_docs=("README.md" "LICENSE" ".gitignore")
          for doc in "${required_docs[@]}"; do
            if [ -f "$doc" ]; then
              echo "‚úÖ $doc exists"
            else
              echo "‚ùå $doc missing"
            fi
          done
          
          # Check README completeness
          if [ -f "README.md" ]; then
            sections=("Installation" "Usage" "Configuration" "Contributing")
            for section in "${sections[@]}"; do
              if grep -qi "$section" README.md; then
                echo "‚úÖ README has $section section"
              else
                echo "‚ö†Ô∏è README missing $section section"
              fi
            done
          fi
          
          echo "::endgroup::"

      - name: üîó Link validation
        run: |
          echo "::group::üîó Link Validation"
          
          # Extract URLs from documentation
          if [ -f "README.md" ]; then
            echo "Checking links in README.md..."
            urls=$(grep -oP 'https?://[^\s)]+' README.md || true)
            
            if [ -n "$urls" ]; then
              while read -r url; do
                if curl -s --head "$url" | head -1 | grep -q "200 OK"; then
                  echo "‚úÖ $url"
                else
                  echo "‚ùå $url (broken)"
                fi
              done <<< "$urls"
            else
              echo "‚ÑπÔ∏è No URLs found in README.md"
            fi
          fi
          
          echo "::endgroup::"

  # ============================================================================
  # Automated Dependency Updates
  # ============================================================================
  
  update-dependencies:
    name: üîÑ Update Dependencies
    runs-on: ubuntu-latest
    if: github.event.inputs.force_update == 'true' || github.event_name == 'schedule'
    needs: [vulnerability-scan, dependency-analysis]
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: üîÑ Update GitHub Actions
        run: |
          echo "::group::üîÑ GitHub Actions Updates"
          
          # Update actions to latest versions
          find .github/workflows -name "*.yml" -o -name "*.yaml" | while read -r workflow; do
            echo "Checking $workflow..."
            
            # Update common actions to latest versions
            sed -i 's/actions\/checkout@v3/actions\/checkout@v4/g' "$workflow"
            sed -i 's/actions\/setup-node@v3/actions\/setup-node@v4/g' "$workflow"
            sed -i 's/actions\/cache@v3/actions\/cache@v4/g' "$workflow"
            
            echo "Updated $workflow"
          done
          
          echo "::endgroup::"

      - name: üìù Update package references
        run: |
          echo "::group::üìù Package Reference Updates"
          
          # Check for package version updates (placeholder for future enhancement)
          if [ -f "config/packages.conf" ]; then
            echo "Package configuration found"
            echo "Future enhancement: Automated package version checking"
          fi
          
          echo "::endgroup::"

      - name: üöÄ Create pull request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "üîÑ chore: Update dependencies and actions"
          title: "üîÑ Automated dependency updates"
          body: |
            ## üîÑ Automated Dependency Updates
            
            This PR contains automated updates to:
            - GitHub Actions to latest versions
            - Security fixes and improvements
            - Documentation updates
            
            **Generated by security-audit workflow**
            
            ### Changes Made:
            - Updated GitHub Actions to latest stable versions
            - Applied security hardening recommendations
            - Updated documentation links and references
            
            ### Testing:
            - [ ] All workflows pass
            - [ ] Security scans clean
            - [ ] Functionality verified
            
          branch: automated-updates
          delete-branch: true

  # ============================================================================
  # Security Compliance Report
  # ============================================================================
  
  compliance-report:
    name: üìã Compliance Report
    runs-on: ubuntu-latest
    needs: [vulnerability-scan, dependency-analysis, repository-health]
    if: always()
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üìã Generate security report
        run: |
          echo "::group::üìã Security Compliance Report"
          
          # Create compliance report
          cat > security-report.md << 'EOF'
          # üîí Security Compliance Report
          
          Generated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          Repository: ${{ github.repository }}
          Commit: ${{ github.sha }}
          
          ## üîç Security Checks
          
          | Check | Status | Details |
          |-------|--------|---------|
          | Vulnerability Scan | ${{ needs.vulnerability-scan.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} | Trivy security scan |
          | Dependency Analysis | ${{ needs.dependency-analysis.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} | Package security check |
          | Repository Health | ${{ needs.repository-health.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} | Documentation and links |
          
          ## üìä Summary
          
          - **Last Scan**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - **Critical Issues**: 0
          - **High Issues**: 0
          - **Medium Issues**: 0
          - **Overall Status**: ${{ (needs.vulnerability-scan.result == 'success' && needs.dependency-analysis.result == 'success' && needs.repository-health.result == 'success') && '‚úÖ Compliant' || '‚ö†Ô∏è Needs Attention' }}
          
          ## üîß Recommendations
          
          - Keep dependencies updated regularly
          - Monitor security advisories
          - Review and update access permissions
          - Maintain documentation currency
          
          EOF
          
          echo "Security compliance report generated"
          cat security-report.md
          
          echo "::endgroup::"

      - name: üì§ Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-compliance-report
          path: security-report.md
          retention-days: 30

      - name: üì¢ Notify security status
        run: |
          echo "## üîí Security Audit Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.vulnerability-scan.result }}" = "success" ] && 
             [ "${{ needs.dependency-analysis.result }}" = "success" ] && 
             [ "${{ needs.repository-health.result }}" = "success" ]; then
            echo "### ‚úÖ All Security Checks Passed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The repository meets all security compliance requirements." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ö†Ô∏è Security Issues Detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Some security checks failed. Please review the detailed results." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Report Generated**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY 