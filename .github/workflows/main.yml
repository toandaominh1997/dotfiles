name: üöÄ Enhanced Dotfiles CI/CD

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Run weekly on Sundays at 00:00 UTC to check for dependency updates
    - cron: '0 0 * * 0'
  workflow_dispatch:
    inputs:
      test_level:
        description: 'Test level (basic, full, integration)'
        required: false
        default: 'full'
        type: choice
        options:
          - basic
          - full
          - integration
      skip_cache:
        description: 'Skip cache'
        required: false
        default: false
        type: boolean

env:
  HOMEBREW_NO_AUTO_UPDATE: 1
  HOMEBREW_NO_INSTALL_CLEANUP: 1
  FORCE_COLOR: 1

jobs:
  # ============================================================================
  # Code Quality and Security
  # ============================================================================
  
  lint-and-security:
    name: üîç Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for better analysis

      - name: üêö Setup ShellCheck
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck

      - name: üßπ Lint shell scripts
        run: |
          echo "::group::üîç Running ShellCheck"
          find . -name "*.sh" -not -path "./.git/*" | while read -r file; do
            echo "Checking: $file"
            shellcheck "$file" || exit 1
          done
          echo "::endgroup::"

      - name: üîí Security scan with Bandit (Python-like analysis)
        run: |
          echo "::group::üîí Security Analysis"
          # Check for common security issues in shell scripts
          grep -r "curl.*http://" --include="*.sh" . && echo "‚ö†Ô∏è Insecure HTTP detected" && exit 1 || true
          grep -r "wget.*http://" --include="*.sh" . && echo "‚ö†Ô∏è Insecure HTTP detected" && exit 1 || true
          grep -r "eval.*\$" --include="*.sh" . && echo "‚ö†Ô∏è Potentially dangerous eval detected" && exit 1 || true
          echo "‚úÖ Security scan passed"
          echo "::endgroup::"

      - name: üìä Upload ShellCheck results
        if: always()
        uses: github/super-linter@v5
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: true
          VALIDATE_BASH: true
          VALIDATE_SHELL_SHFMT: true

  # ============================================================================
  # Syntax and Basic Validation
  # ============================================================================
  
  syntax-validation:
    name: ‚úÖ Syntax Validation
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        bash-version: ['3.2', '4.0', '5.0', 'latest']
        exclude:
          # macOS comes with bash 3.2, so we test that specifically
          - os: macos-latest
            bash-version: '4.0'
          - os: macos-latest
            bash-version: '5.0'
          # Ubuntu has newer bash, so we skip 3.2
          - os: ubuntu-latest
            bash-version: '3.2'

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üêö Setup Bash version
        if: matrix.bash-version != 'latest' && runner.os == 'Linux'
        run: |
          sudo apt-get update
          case "${{ matrix.bash-version }}" in
            "4.0") sudo apt-get install -y bash=4.* ;;
            "5.0") sudo apt-get install -y bash=5.* ;;
          esac

      - name: üîç Validate syntax
        run: |
          echo "::group::üîç Syntax Validation"
          bash --version
          
          # Test main setup script
          bash -n setup.sh
          echo "‚úÖ setup.sh syntax OK"
          
          # Test all library modules
          if [ -d "lib" ]; then
            find lib -name "*.sh" -exec bash -n {} \;
            echo "‚úÖ Library modules syntax OK"
          fi
          
          # Test utility scripts
          if [ -d "utils" ]; then
            find utils -name "*.sh" -exec bash -n {} \;
            echo "‚úÖ Utility scripts syntax OK"
          fi
          
          # Test configuration scripts if they exist
          if [ -d "scripts" ]; then
            find scripts -name "*.sh" -exec bash -n {} \;
            echo "‚úÖ Script modules syntax OK"
          fi
          echo "::endgroup::"

  # ============================================================================
  # Unit and Integration Tests
  # ============================================================================
  
  unit-tests:
    name: üß™ Unit Tests
    runs-on: ${{ matrix.os }}
    needs: [syntax-validation]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üèóÔ∏è Setup test environment
        run: |
          # Create test directories
          mkdir -p /tmp/dotfiles-test
          export TEST_DIR="/tmp/dotfiles-test"

      - name: üß™ Run unit tests
        run: |
          echo "::group::üß™ Unit Tests"
          
          # Test configuration parser
          if [ -f "utils/config_parser.sh" ]; then
            echo "Testing configuration parser..."
            bash utils/config_parser.sh --help || true
          fi
          
          # Test dry-run mode
          echo "Testing dry-run mode..."
          bash setup.sh --dry-run --help
          
          # Test version command
          echo "Testing version command..."
          bash setup.sh --version
          
          # Run integration tests if available
          if [ -f "tests/integration_test.sh" ]; then
            echo "Running integration tests..."
            bash tests/integration_test.sh
          fi
          
          echo "::endgroup::"

  # ============================================================================
  # Cross-Platform Installation Tests
  # ============================================================================
  
  installation-tests:
    name: üöÄ Installation Tests (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: [lint-and-security, unit-tests]
    if: github.event.inputs.test_level != 'basic'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04, macos-12, macos-13, macos-14]
        test-mode: [dry-run, minimal]

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üíæ Cache package downloads
        if: github.event.inputs.skip_cache != 'true'
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/homebrew
            /tmp/dotfiles-cache
          key: ${{ runner.os }}-packages-${{ hashFiles('**/packages.conf') }}
          restore-keys: |
            ${{ runner.os }}-packages-

      - name: üèóÔ∏è Prepare test environment
        run: |
          echo "::group::üèóÔ∏è Environment Setup"
          
          # Set up environment variables
          export DOTFILES_TEST_MODE=true
          export DOTFILES_CI=true
          
          # Create backup directory
          mkdir -p ~/.dotfiles-backup-ci
          
          # Show system information
          echo "OS: $(uname -a)"
          echo "Shell: $SHELL"
          echo "Available space: $(df -h . | tail -1)"
          
          echo "::endgroup::"

      - name: üîç Test dry-run installation
        if: matrix.test-mode == 'dry-run'
        run: |
          echo "::group::üîç Dry-run Installation Test"
          
          # Test dry-run mode
          timeout 300 bash setup.sh --dry-run --verbose || {
            echo "‚ùå Dry-run test failed or timed out"
            exit 1
          }
          
          echo "‚úÖ Dry-run test completed successfully"
          echo "::endgroup::"

      - name: ‚ö° Test minimal installation
        if: matrix.test-mode == 'minimal'
        run: |
          echo "::group::‚ö° Minimal Installation Test"
          
          # Test actual installation with minimal packages
          timeout 900 bash setup.sh --quiet --minimal || {
            echo "‚ùå Minimal installation failed or timed out"
            exit 1
          }
          
          echo "‚úÖ Minimal installation completed successfully"
          echo "::endgroup::"

      - name: üîß Test upgrade functionality
        if: matrix.test-mode == 'minimal'
        run: |
          echo "::group::üîß Upgrade Test"
          
          # Test upgrade mode
          timeout 600 bash setup.sh --upgrade --dry-run || {
            echo "‚ùå Upgrade test failed or timed out"
            exit 1
          }
          
          echo "‚úÖ Upgrade test completed successfully"
          echo "::endgroup::"

      - name: üìä Validate installation
        if: matrix.test-mode == 'minimal'
        run: |
          echo "::group::üìä Installation Validation"
          
          # Check if essential tools are available
          command -v git >/dev/null && echo "‚úÖ Git installed" || echo "‚ùå Git missing"
          command -v curl >/dev/null && echo "‚úÖ Curl installed" || echo "‚ùå Curl missing"
          command -v zsh >/dev/null && echo "‚úÖ Zsh installed" || echo "‚ùå Zsh missing"
          
          # Check configuration files
          [ -f ~/.zshrc ] && echo "‚úÖ Zsh config exists" || echo "‚ÑπÔ∏è Zsh config not found"
          
          echo "::endgroup::"

  # ============================================================================
  # Performance and Compatibility Tests
  # ============================================================================
  
  performance-tests:
    name: ‚ö° Performance Tests
    runs-on: ubuntu-latest
    needs: [installation-tests]
    if: github.event.inputs.test_level == 'full'

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: ‚ö° Performance benchmarks
        run: |
          echo "::group::‚ö° Performance Benchmarks"
          
          # Time the dry-run execution
          echo "Benchmarking dry-run performance..."
          time bash setup.sh --dry-run >/dev/null
          
          # Memory usage test
          echo "Testing memory usage..."
          /usr/bin/time -v bash setup.sh --dry-run >/dev/null 2>&1 || true
          
          echo "::endgroup::"

  # ============================================================================
  # Documentation and Release
  # ============================================================================
  
  documentation-check:
    name: üìö Documentation Check
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üìö Validate documentation
        run: |
          echo "::group::üìö Documentation Validation"
          
          # Check if README exists and has required sections
          if [ -f "README.md" ]; then
            echo "‚úÖ README.md exists"
            grep -q "Installation" README.md && echo "‚úÖ Installation section found" || echo "‚ùå Installation section missing"
            grep -q "Usage" README.md && echo "‚úÖ Usage section found" || echo "‚ùå Usage section missing"
          else
            echo "‚ùå README.md missing"
            exit 1
          fi
          
          # Check for help command
          bash setup.sh --help >/dev/null && echo "‚úÖ Help command works" || echo "‚ùå Help command broken"
          
          echo "::endgroup::"

  # ============================================================================
  # Notification and Reporting
  # ============================================================================
  
  notify-completion:
    name: üì¢ Notify Completion
    runs-on: ubuntu-latest
    needs: [installation-tests, performance-tests, documentation-check]
    if: always()
    
    steps:
      - name: üìä Generate summary
        run: |
          echo "::notice title=CI Summary::Enhanced Dotfiles CI/CD pipeline completed"
          
          # Create job summary
          echo "## üöÄ Enhanced Dotfiles CI/CD Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Results:" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.lint-and-security.result }}" = "success" ]; then
            echo "- ‚úÖ Code Quality & Security: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ùå Code Quality & Security: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.installation-tests.result }}" = "success" ]; then
            echo "- ‚úÖ Installation Tests: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ùå Installation Tests: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üèÜ All tests completed successfully!" >> $GITHUB_STEP_SUMMARY
